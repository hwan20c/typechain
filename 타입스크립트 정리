자바스크립트 -> 타입스크립트로 넘어가는이유

타입안정성 때문
-> 코드에 버그 줄고
-> 생산성늘고 
-> 런타임 에러 줄고

 
 자바스크립트는 적당한 타입값을 지정하지 않고 사용하면 에러를 뿜지 않고 NaN과 같은 값을 보내는데,
이건 에러가 아닌 실행된 결과기 때문에 개발자 입장에선 헷갈리거나 정확한 원인을 알 수 없다.

자바스크립트 에러중에 최악의 에러는 런타임 에러
실행(컴파일)이 되기전에 에러가 나는게 아니고 실행이 되고나서 에러를 리턴하기 때문에, 코드를 실행할떄 까지 알 수 가 없다.
보통의 이상적인 경우는 컴파일이 되기전에 에러를 리턴해주는게 이상적이다.(개발자가 아닌 일반 유저들도 에러를 볼 수 있다는 점이 그렇다.)

--------------------------------------

타입 스크립트는 자바스크립트로 변경할 뿐만 아니라, 타입스크립트가 자바스크립트로 변환하기 전에 보호를 해준다.

타입 추론
데이터와 변수의 타입을 명시적으로 정의할 수도 있고, 아니면 그냥 자바스크립트처럼 그냥 해도 된다. 왜냐하면 타입 추론을 해주기 때문.

----------------------------------------

타입 쓰는방법

기본 생성자 뒤에 타입
함수 인자 뒤에 타입
함수 전체 이름 뒤에 타입 

함수(function)를 만들때 이런식으로 만들 수 있다.
const playerMaker = (name:string) : Player => ({name})

--------------------------------------------------------

타입스크립트는 readonly 속성을 만들어 줄 수 있다.
-> 만들면 불변성의 변수가 되어 버린다.(javascript에서는 쓰이지 않음.)

Tuple
-> 특정위치에 특정타입이 있는 배열이 되어야한다.

any 
-> 비어있는값들의 대부분이 any가 된다. 
-> any는 typescript를 javascript처럼 되어버리기때문에 보호장치(컴파일전에 에러를 알려주는)것들이 사라지게 되는것이다.
-> 프로그램이 실행 된 뒤에 오류를 알려주는 방법은 좋지않다.
-> any를 typescript에서 쓰는건 그렇게 바람직한 방법은 아니다.
-> 쓸떄는 신중하게 사용해야한다.

--------------------------------------------------------

타입스크립트의 중요한 포인트는 타입체커와 소통하는것

anknown타입
typeof를 사용해서 먼저 무슨타입인지 확인을 해서 사용한다.
-> 변수의 타입이 뭔지 모를때 사용한다.

void타입
보통 return하지 않는 함수일때 사용한다 
void는 보통 함수에 아무 타입도 안써줬을 떄 알아서 작용된다.

never타입
함수안에 error를 발생시키는 방법으로 쓰일떄가 있다. 혹은 들어오는 인자값이 뭔지 모를떄 사용되기도 한다.

------------------------------------------------------

다형성과 오버로딩

type Add = (a:number, b:number) => number;
-> call signature 라고 한다.

type Add = {
    (a:number, b:number) : number;
}
이런식으로도 변경 할 수 있다.

----------------------------------------------------

오버로딩은 함수가 여러개의 콜 시그니쳐를 가질 때를 말한다.

type Add = {
    (a:number, b:number) : number
    (a: number, b:number, c?: number):number,
}

const add:Add = (a,b,c?:number) => {
    return a+b
}

-> 파라미터가 다를떄 이런식으로 할 수 있다.

-------------------------------------------------

제네릭은 타입의 placeholder와 같은것...


type SuperPrint = {
    <TypePlaceholder>(arr: TypePlaceholder[]):void // < > 사이에는 변수명을 쓰는거므로 아무거나 올 수 있다 보통 T를 쓰는경우가 많다.
} 

const superPrint : SuperPrint = (arr) => {
    arr.forEach(i => console.log(i));
}

superPrint([1, 2, 3, 4]);
superPrint([true, false, true]);
superPrint(["a", "b", "c"]);
superPrint([1, 2, true, false, "hello"]);

이런식을 제네릭을 쓰게 되면 해당 배열안에 타입이 어떤걸 들어와도 제네릭으로 먼저 분석하고 진행하기 때문에, 오류가 나지 않는다.

type SuperPrint = {
    <TypePlaceholder>(arr: TypePlaceholder[]): TypePlaceholder
}

const superPrint : SuperPrint = (arr) => arr[0]

const a = superPrint([1, 2, 3, 4]);
const b = superPrint([true, false, true]);
const c = superPrint(["a", "b", "c"]);
const d = superPrint([1, 2, true, false, "hello"]);

이런식으로도 가능하다.

--------------------------------------------------


추상클래스 안에서 추상클래스를 만들수 있지만, 메소드의 콜 시그니쳐만 써야한다

abstract class User {
    constructor(
        private firstName:string,
        private lastName:string,
        private nickname:string
    ) {}
    abstract getNickName():void
    getFullName() {
        return `${this.firstName} ${this.lastName}`;
    }
}

이런식으로 해야한다.

private 말고 protected로 하면 바깥에서 받는 값을 바꿔줄수 있다. protected는 extends 안에서만 바꿀 수 있고,
public은 모든곳에서 재사용이 가능하다.


-----------------------------------------------------------

interface는 type과 비슷하지만 다르다
type 키워드가 interface보다 할 수 있는 특징이 더 많다.
오브젝트의 모양을 정할때 인터페이스를 사용하는게 조금 더 이해하기 쉽다.
인터페이스를 상속 받으면 상속된 필드값의 생성자를 public으로만 지정해줘야한다.

-------------------------------------------------------------

tsconfig.json을 사용해서 typescript를 사용해서 코딩한다는것을 노드패키지에 알린다.
tsconfig.json을 이용하여 javascript의 버전 같은것도 지정 할 수 있다. 

